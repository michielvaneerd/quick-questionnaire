{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;AAAmD;;AAEnD;AACA;AACA;AACkD;AAClD,eAAe,iEAAa,CAAC,sDAAG;AAChC;AACA;AACA,CAAC,EAAE,iEAAa,CAAC,uDAAI;AACrB;AACA,CAAC;AACD,+DAAe,MAAM,EAAC;AACtB;;;;;;;;;;;;;;;;;;;ACbA;AACA;AAGO,MAAMM,OAAO,GAAIC,KAAD,IAAW;AAE9B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,UAAlB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA,WAAxC;AAAqDC,IAAAA,YAArD;AAAmEC,IAAAA,UAAnE;AAA+EC,IAAAA;AAA/E,MAAwFR,KAA9F;;AAEA,WAASS,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACnC,QAAIC,UAAU,GAAG,CAAC,GAAGV,OAAJ,CAAjB;AACAU,IAAAA,UAAU,CAACF,KAAD,CAAV,GAAoBC,QAApB;AACAR,IAAAA,UAAU,CAACS,UAAD,CAAV;AACH;;AAED,SAAO,kEAAC,wDAAD;AAAO,SAAK,EAAEX,KAAd;AAAqB,kBAAc,EAAEM;AAArC,KACH,kEAAC,8DAAD;AAAa,SAAK,EAAC,UAAnB;AAA8B,SAAK,EAAEH,QAArC;AAA+C,YAAQ,EAAGS,KAAD,IAAWR,WAAW,CAACQ,KAAD;AAA/E,IADG,EAEFX,OAAO,CAACY,GAAR,CAAY,CAACC,MAAD,EAASL,KAAT,KAAmB,kEAAC,8DAAD;AAAa,OAAG,EAAEA,KAAlB;AAAyB,SAAK,EAAEK,MAAhC;AAAwC,YAAQ,EAAGF,KAAD,IAAW;AAAEJ,MAAAA,YAAY,CAACC,KAAD,EAAQG,KAAR,CAAZ;AAA6B;AAA5F,IAA/B,CAFE,EAGH,kEAAC,yDAAD;AAAQ,WAAO,EAAE,MAAMV,UAAU,CAACD,OAAO,CAACc,MAAR,CAAe,EAAf,CAAD;AAAjC,aAHG,EAIH,kEAAC,yDAAD;AAAQ,WAAO,EAAEV;AAAjB,UAJG,CAAP;AAMH,CAhBM;;;;;;;;;;ACJP;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAe;AACf;AACA,oBAAoB,sBAAsB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;UChBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;CAEA;;AACA;AACA;AACA;AACA;CAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAoB,2DAAQ,CAAC,YAAY;AACjB;AACA;AACA;AACA,MAAI,CAACE,MAAM,CAACC,YAAR,IAAwBD,MAAM,CAACE,eAAP,KAA2B,qBAAvD,EAA8E;AAC1EL,IAAAA,sEAAm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","sources":["webpack://quick-questionnaire/../privategooglecalendars/node_modules/@wordpress/icons/build-module/library/create.js","webpack://quick-questionnaire/./src/modal.js","webpack://quick-questionnaire/external window [\"wp\",\"blockEditor\"]","webpack://quick-questionnaire/external window [\"wp\",\"blocks\"]","webpack://quick-questionnaire/external window [\"wp\",\"components\"]","webpack://quick-questionnaire/external window [\"wp\",\"domReady\"]","webpack://quick-questionnaire/external window [\"wp\",\"element\"]","webpack://quick-questionnaire/external window [\"wp\",\"primitives\"]","webpack://quick-questionnaire/../privategooglecalendars/node_modules/@babel/runtime/helpers/esm/extends.js","webpack://quick-questionnaire/webpack/bootstrap","webpack://quick-questionnaire/webpack/runtime/compat get default export","webpack://quick-questionnaire/webpack/runtime/define property getters","webpack://quick-questionnaire/webpack/runtime/hasOwnProperty shorthand","webpack://quick-questionnaire/webpack/runtime/make namespace object","webpack://quick-questionnaire/./src/index.js"],"sourcesContent":["import { createElement } from \"@wordpress/element\";\n\n/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nconst create = createElement(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\"\n}, createElement(Path, {\n  d: \"M16 11.2h-3.2V8h-1.6v3.2H8v1.6h3.2V16h1.6v-3.2H16z\"\n}));\nexport default create;\n//# sourceMappingURL=create.js.map","import { CheckboxControl, Button, Modal, TextControl } from '@wordpress/components';\nimport { useEffect, useState } from '@wordpress/element';\n\n\nexport const MyModal = (props) => {\n\n    const { title, answers, setAnswers, question, setQuestion, onModalClose, closeModal, type } = props;\n\n    function updateAnswer(index, newValue) {\n        let newAnswers = [...answers];\n        newAnswers[index] = newValue;\n        setAnswers(newAnswers);\n    }\n\n    return <Modal title={title} onRequestClose={closeModal}>\n        <TextControl label=\"Question\" value={question} onChange={(value) => setQuestion(value)} />\n        {answers.map((answer, index) => <TextControl key={index} value={answer} onChange={(value) => { updateAnswer(index, value); }} />)}\n        <Button onClick={() => setAnswers(answers.concat(''))}>Click</Button>\n        <Button onClick={onModalClose}>OK</Button>\n    </Modal>;\n}","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"domReady\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"primitives\"];","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * See for source:\n * https://github.com/MarieComet/core-block-custom-attributes\n * https://developer.wordpress.org/block-editor/how-to-guides/plugin-sidebar-0/\n * https://awhitepixel.com/blog/how-to-add-post-meta-fields-to-gutenberg-document-sidebar/\n * https://wordpress.org/support/topic/how-to-create-a-gutenberg-block-with-your-own-list-inside-which-there-will-be-o/ ==> eigen list maken\n */\n\n//import { addFilter } from '@wordpress/hooks';\n//import { createHigherOrderComponent } from '@wordpress/compose';\nimport { InspectorControls, useBlockProps, RichText, BlockControls } from '@wordpress/block-editor';\nimport { PanelBody, CheckboxControl, ToolbarDropdownMenu, Button, Modal, ToolbarGroup, TextControl } from '@wordpress/components';\n//import { useEntityProp } from '@wordpress/core-data';\nimport { useEffect, useState } from '@wordpress/element';\nimport { registerBlockType, unregisterBlockType } from '@wordpress/blocks';\nimport domReady from '@wordpress/dom-ready';\nimport { create } from '@wordpress/icons';\nimport { MyModal } from './modal';\n\n// const blockName = 'core/list';\n\n// // Enable some attributes\n// function setSidebarEnableAttribute(settings, name) {\n//     if (name !== blockName) return settings;\n//     return Object.assign({}, settings, {\n//         attributes: Object.assign({}, settings.attributes, {\n//             enableAttribute: { type: 'boolean' },\n//             showButtonAttribute: { type: 'boolean' },\n//             qqId: { type: 'string' }\n//         }),\n//     });\n// }\n// addFilter(\n//     'blocks.registerBlockType',\n//     'quick-questionnaire/set-sidebar-enable-attribute',\n//     setSidebarEnableAttribute\n// );\n\n// // Add sidebar controls for the attributes\n// const withSidebarEnable = createHigherOrderComponent((BlockEdit) => {\n//     return (props) => {\n\n//         if (props.name !== blockName) {\n//             return <BlockEdit {...props} />;\n//         }\n\n//         const { attributes, setAttributes } = props;\n//         const { enableAttribute, showButtonAttribute } = attributes;\n\n//         // const [ meta, setMeta ] = useEntityProp('postType', 'quick-questionnaire', 'meta');\n//         // let metaValue = null;\n//         // try {\n//         //     metaValue = JSON.parse(meta['_qq_enable_show_btn']) || {};\n//         // } catch (ex) {\n//         //     console.error(ex);\n//         //     metaValue = {};\n//         // }\n\n//         return <>\n//             <Fragment>\n//                 <BlockEdit {...props} />\n//                 <InspectorControls>\n//                     <PanelBody title=\"Quick Questionnaire\">\n//                         <CheckboxControl label=\"Enable\" checked={enableAttribute} onChange={(value) => {\n//                             setAttributes({\n//                                 enableAttribute: value,\n//                                 showButtonAttribute: value ? showButtonAttribute : false,\n//                                 qqId: value ? props.clientId : null\n//                             });\n//                         }} />\n//                         {enableAttribute ? <CheckboxControl label=\"Show button\" checked={showButtonAttribute} onChange={(value) => {\n//                             //metaValue[qqId] = value;\n//                             //setMeta({ ...meta, _qq_enable_show_btn: JSON.stringify(metaValue) });\n//                             setAttributes({\n//                                 showButtonAttribute: value\n//                             });\n//                         }} /> : null}\n//                     </PanelBody>\n//                 </InspectorControls>\n//             </Fragment>\n//         </>;\n\n//     };\n// }, 'withSidebarEnable');\n// addFilter(\n//     'editor.BlockEdit',\n//     'quick-questionnaire/with-sidebar-enable',\n//     withSidebarEnable\n// );\n\n// // Add className to block in editor.\n// const withSidebarEnableProp = createHigherOrderComponent((BlockListBlock) => {\n//     return (props) => {\n//         if (props.name !== blockName) {\n//             return <BlockListBlock {...props} />;\n//         }\n//         const { attributes } = props;\n//         const { enableAttribute, showButtonAttribute } = attributes;\n//         let classNames = [];\n//         if (enableAttribute) classNames.push('quick-questionnaire-enabled');\n//         if (showButtonAttribute) classNames.push('quick-questionnaire-show-button');\n//         if (classNames.length > 0) {\n//             return <BlockListBlock className={classNames.join(\" \")} {...props} />;\n//         } else {\n//             return <BlockListBlock {...props} />;\n//         }\n//     };\n// });\n// addFilter(\n//     'editor.BlockListBlock',\n//     'quick-questionnaire/with-sidebar-enable-prop',\n//     withSidebarEnableProp\n// );\n\n// // Add className to block in database\n// const saveSidebarEnableAttribute = (extraProps, blockType, attributes) => {\n//     if (blockType.name === blockName) {\n//         const { enableAttribute, showButtonAttribute, qqId } = attributes;\n//         let classNames = [];\n//         if (extraProps.className) classNames.push(extraProps.className);\n//         if (enableAttribute) classNames.push('quick-questionnaire-enabled');\n//         //if (showButtonAttribute) classNames.push('quick-questionnaire-show-button');\n//         if (enableAttribute) {\n//             extraProps.className = classNames.join(\" \");\n//             extraProps['data-qq-id'] = qqId;\n//             if (showButtonAttribute) {\n//                 extraProps['data-qq-show-button'] = true;\n//             }\n//         }\n//     }\n//     return extraProps;\n// };\n// addFilter(\n//     'blocks.getSaveContent.extraProps',\n//     'quick-questionnaire/save-sidebar-enable-attribute',\n//     saveSidebarEnableAttribute\n// );\n\ndomReady(function () {\n    //unregisterBlockType('core/verse');\n    // Now unregister quick-questionnaire/list if we are not on quick-questionnaire post_type\n    // AND define is not set.\n    if (!window.qq_all_posts && window.qq_my_post_type !== 'quick-questionnaire') {\n        unregisterBlockType('quick-questionnaire/list');\n    }\n});\n\nfunction onAdd(arg) {\n    const { attributes, setAttributes, type, setModalOpen } = arg;\n    setModalOpen(true);\n    // setAttributes({\n    //     content: attributes.content + '<li>New item {' + type + '{ Answer }}</li>'\n    // });\n}\n\nconst defaultNewQuestionModal = {\n    open: false,\n    type: null,\n    question: '',\n    answers: []\n};\n\nregisterBlockType('quick-questionnaire/list', {\n    edit: function (props) {\n        const { attributes, setAttributes } = props;\n        const { showButton, ordered, qqId } = attributes;\n        const blockProps = useBlockProps({\n            className: \"quick-questionnaire-enabled\"\n        });\n        // const [isModalOpen, setModalOpen] = useState(false);\n        // const [ type, setType ] = useState(null);\n        const [questionModal, setQuestionModal] = useState({ ...defaultNewQuestionModal });\n        //const [question, setQuestion] = useState('');\n        //const [answers, setAnswers] = useState([]);\n\n        useEffect(() => {\n            setAttributes({\n                qqId: qqId || Date.now()\n            });\n        }, []);\n\n        function onModalClose() {\n            setAttributes({\n                content: attributes.content + '<li>' + questionModal.question + ' {' + questionModal.type + '{ ' + questionModal.answers.join(' | ') + ' }}</li>'\n            });\n            setQuestionModal({ ...defaultNewQuestionModal });\n        }\n\n        function openModal(type) {\n            setQuestionModal({\n                ...defaultNewQuestionModal,\n                type,\n                open: true\n            });\n        }\n\n        function closeModal() {\n            setQuestionModal({\n                ...defaultNewQuestionModal\n            });\n        }\n\n        function setAnswers(newAnswers) {\n            //let newAnswers = [...questionModal.answers];\n            //newAnswers[index] = newValue;\n            setQuestionModal({ ...questionModal, answers: newAnswers });\n        }\n\n        function setQuestion(newValue) {\n            setQuestionModal({\n                ...questionModal, question: newValue\n            });\n        }\n\n        const modalWindow = questionModal.open\n            ?\n            MyModal({ title: \"TEXT\", answers: questionModal.answers, setAnswers, question: questionModal.question, setQuestion, closeModal, onModalClose, type: questionModal.type })\n            :\n            null;\n\n        const controls = [\n            {\n                title: 'Case sensitive text',\n                //onClick: () => onAdd({ attributes, setAttributes, setModalOpen, type: 'text' })\n                onClick: () => openModal('text')\n            },\n            {\n                title: 'Case insensitive text',\n                onClick: () => openModal('itext')\n            },\n            {\n                title: 'Radio',\n                onClick: () => openModal('radio')\n            },\n            {\n                title: 'Checkbox',\n                onClick: () => openModal('checkbox')\n            },\n            {\n                title: 'Regular expression',\n                onClick: () => openModal('reg')\n            },\n        ];\n\n        return <>\n            <RichText\n                {...blockProps}\n                tagName={ordered ? \"ol\" : \"ul\"}\n                multiline=\"li\"\n                value={attributes.content}\n                onChange={(content) => setAttributes({ content })}\n            />\n            <InspectorControls>\n                <PanelBody title=\"Quick Questionnaire\">\n                    <CheckboxControl label=\"Show button\" checked={showButton} onChange={(value) => {\n                        setAttributes({\n                            showButton: value\n                        });\n                    }} />\n                    <CheckboxControl label=\"Ordered\" checked={ordered} onChange={(value) => {\n                        setAttributes({\n                            ordered: value\n                        });\n                    }} />\n                </PanelBody>\n            </InspectorControls>\n            <BlockControls>\n                <ToolbarGroup>\n                    <ToolbarDropdownMenu icon={create} label=\"Add new question\" controls={controls} />\n                </ToolbarGroup>\n            </BlockControls>\n            {modalWindow}\n        </>;\n    },\n    save: function (props) {\n        const { attributes } = props;\n        const { showButton, ordered, qqId } = attributes;\n        const blockProps = useBlockProps.save();\n\n        //const [ meta, setMeta ] = useEntityProp('postType', 'quick-questionnaire', 'meta');\n\n        // Hier moet ik attributes.content parsen en opslaan in atributes.\n        // Dit kan niet want save kan geen sideeffects hebben en moet een pure function zijn...\n        //console.log(attributes.content);\n\n        return <RichText.Content {...blockProps}\n            data-qq-show-button={showButton || null}\n            data-qq-id={attributes.qqId}\n            tagName={ordered ? \"ol\" : \"ul\"}\n            className=\"quick-questionnaire-enabled\"\n            value={attributes.content} />;\n    },\n});\n"],"names":["CheckboxControl","Button","Modal","TextControl","useEffect","useState","MyModal","props","title","answers","setAnswers","question","setQuestion","onModalClose","closeModal","type","updateAnswer","index","newValue","newAnswers","value","map","answer","concat","InspectorControls","useBlockProps","RichText","BlockControls","PanelBody","ToolbarDropdownMenu","ToolbarGroup","registerBlockType","unregisterBlockType","domReady","create","window","qq_all_posts","qq_my_post_type","onAdd","arg","attributes","setAttributes","setModalOpen","defaultNewQuestionModal","open","edit","showButton","ordered","qqId","blockProps","className","questionModal","setQuestionModal","Date","now","content","join","openModal","modalWindow","controls","onClick","save"],"sourceRoot":""}